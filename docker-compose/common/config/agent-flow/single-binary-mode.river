logging {
  level  = "warn"
  format = "logfmt"
}

tracing {
  sampling_fraction = 0.5
  write_to          = [otelcol.processor.batch.containers.input]
}

module.file "local" {
	  filename = env("AGENT_CONFIG_FOLDER") + "/modules/local.river"
    arguments {
      config_url = "https://gist.githubusercontent.com/qclaogui/70b05aa375f0108c36b2bca3c7335200/raw/715669da876121c69bf40d031cdee7fa8b9a8342/grafana-qclaogui.json"
      token      = env("GITHUB_TOKEN")
    }
}

discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
  filter {
		name = "status"
		values = ["running"]
	}
}

discovery.relabel "containers" {
  targets = discovery.docker.containers.targets

  rule {
		source_labels = ["__address__"]
		target_label  = "cluster"
    replacement   = "docker-compose"
	}

  rule {
		source_labels = ["__address__"]
		target_label  = "namespace"
    replacement   = "monitoring"
	}

  rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
    regex         = "(.*)"
		target_label  = "pod"
	}

  rule {
		source_labels = ["__meta_docker_container_name"]
    regex         = "/(.*)"
		target_label  = "container"
	}
}

/********************************************
 * Metrics
 ********************************************/

prometheus.exporter.unix {
  set_collectors     = ["cpu"]
  disable_collectors = ["diskstats", "mdadm", "textfile", "hwmon"]
}

prometheus.scrape "integrations" {
  targets    = concat(
    [{"__address__" = "agent:12345",  "job" = "monitoring/agent"}],
    [{"__address__" = "grafana:3000", "job" = "monitoring/grafana"}],
    [{"__address__" = "mimir:9009", "job" = "monitoring/mimir"}],
    [{"__address__" = "loki:3100", "job" = "monitoring/loki"}],
    [{"__address__" = "tempo:3200", "job" = "monitoring/tempo"}],
    [{"__address__" = "pyroscope:4100", "job" = "monitoring/pyroscope"}],
    prometheus.exporter.unix.targets,
  )
  scrape_interval = "15s"
  
  clustering {
    enabled = true
  }
  
  forward_to = [prometheus.relabel.integrations.receiver]
}

prometheus.scrape "minio" {
  targets = [{"__address__" = "minio:9000", "job" = "integrations/minio"}]
  
  scrape_interval = "15s"
  metrics_path    = "/minio/v2/metrics/cluster"

  forward_to = [prometheus.relabel.integrations.receiver]
}

prometheus.relabel "integrations" {
  rule {
		source_labels = ["__address__"]
		target_label  = "cluster"
    replacement   = "docker-compose"
	}

  rule {
		source_labels = ["__address__"]
		target_label  = "namespace"
    replacement   = "monitoring"
	}

  rule {
		source_labels = ["job"]
    regex         = "integrations/(.*)"
		target_label  = "pod"
	}

  rule {
		source_labels = ["job"]
    regex         = "integrations/(.*)"
		target_label  = "container"
	}

  forward_to = [module.file.local.exports.metrics_receiver]
}

/********************************************
 * Logs
 ********************************************/

loki.source.docker "containers" {
  host          = "unix:///var/run/docker.sock"
  targets       = discovery.relabel.containers.output
  relabel_rules = discovery.relabel.containers.rules
  forward_to    = [loki.process.containers.receiver]
}

loki.process "containers" {
	forward_to = [module.file.local.exports.logs_receiver]

	stage.drop {
    longer_than = "8KB"
		older_than  = "12h"
	}

  stage.tenant {
    value = "anonymous"
  }
}

/********************************************
 * Traces
 ********************************************/

otelcol.receiver.otlp "containers" {
	grpc { endpoint = "0.0.0.0:4317" }
	http { endpoint = "0.0.0.0:4318" }

	output {
		metrics = [otelcol.processor.batch.containers.input]
		logs    = [otelcol.processor.batch.containers.input]
		traces  = [otelcol.processor.batch.containers.input]
	}
}

otelcol.processor.batch "containers" {
	output {
        metrics = [otelcol.processor.memory_limiter.containers.input]
        logs    = [otelcol.processor.memory_limiter.containers.input]
        traces  = [otelcol.processor.memory_limiter.containers.input]
    }
}

otelcol.processor.memory_limiter "containers" {
  check_interval = "1s"
  limit 		     = "256MiB"

	output {
    metrics = [otelcol.exporter.prometheus.local.input]
    logs    = [otelcol.exporter.loki.local.input]
    traces  = [module.file.local.exports.traces_receiver]
  }
}

otelcol.exporter.prometheus "local" { forward_to = [module.file.local.exports.metrics_receiver] }
otelcol.exporter.loki "local" { forward_to = [module.file.local.exports.logs_receiver] }

/********************************************
 * Profiles
 ********************************************/

pyroscope.scrape "containers" {
  targets = [
    {"__address__" = "pyroscope:4100", "service_name"="pyroscope"},
    {"__address__" = "agent:12345", "service_name"="agent"},
    {"__address__" = "grafana:6060", "service_name"="grafana"},
  ]

  profiling_config {
    profile.fgprof { enabled = true }
    profile.block { enabled = false }
    profile.mutex { enabled = false}
  }

  forward_to = [module.file.local.exports.profiles_receiver]
}