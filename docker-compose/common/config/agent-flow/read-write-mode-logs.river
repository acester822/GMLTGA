// https://github.com/grafana/agent-configurator

logging {
  level  = "warn"
  format = "logfmt"
}

module.file "docker_compose" {
	  filename = env("AGENT_CONFIG_FOLDER") + "/modules/docker_compose.river"
    arguments {
      logs_endpoint  = "http://loki:3100"
    }
}

discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
  filter {
		name = "status"
		values = ["running"]
	}
}

discovery.relabel "containers" {
  targets = discovery.docker.containers.targets

  rule {
		source_labels = ["__address__"]
		target_label  = "scraped_by"
    replacement   = "grafana-agent"
	}

  rule {
		source_labels = ["__address__"]
		target_label  = "cluster"
    replacement   = "docker-compose"
	}

  rule {
		source_labels = ["__address__"]
		target_label  = "namespace"
    replacement   = "monitoring"
	}

  // filter by service name
  rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
    action        = "keep"
    regex         = "(agent|mimir|grafana|loki|tempo|pyroscope)"
	}

  rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
    regex         = "(.*)"
    replacement   = "monitoring/$1"
		target_label  = "job"
	}

  rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
    regex         = "(.*)"
		target_label  = "pod"
	}

  rule {
		source_labels = ["__meta_docker_container_name"]
    regex         = "/(.*)"
		target_label  = "container"
	}
}

/********************************************
 * Logs
 ********************************************/

loki.source.docker "containers" {
  host          = "unix:///var/run/docker.sock"
  targets       = discovery.relabel.containers.output
  relabel_rules = discovery.relabel.containers.rules
  forward_to    = [loki.process.containers.receiver]
}

loki.process "containers" {
	forward_to = [module.file.docker_compose.exports.logs_receiver]

	stage.drop {
    longer_than = "8KB"
		older_than  = "12h"
	}

  stage.tenant {
    value = "anonymous"
  }
}

/********************************************
 * Otelcol for Logs
 ********************************************/

otelcol.receiver.otlp "containers" {
	grpc { endpoint = "0.0.0.0:4317" }
	http { endpoint = "0.0.0.0:4318" }

	output {
		logs    = [otelcol.processor.batch.containers.input]
	}
}

otelcol.processor.batch "containers" {
	output {
        logs    = [otelcol.processor.memory_limiter.containers.input]
    }
}

otelcol.processor.memory_limiter "containers" {
  check_interval = "1s"
  limit 		     = "256MiB"

	output {
    logs    = [otelcol.exporter.loki.containers.input]
  }
}

otelcol.exporter.loki "containers" { 
  forward_to = [module.file.docker_compose.exports.logs_receiver] 
}
